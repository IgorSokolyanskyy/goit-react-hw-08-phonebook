{"ast":null,"code":"import{Formik,ErrorMessage}from'formik';import{Input,Button,FormList}from'./ContactForm.styled';import{nanoid}from'nanoid';// import * as yup from 'yup';\n// const schema = yup.object().shape({\n//   name: yup.string().required('Name may contain only letters'),\n//   numder: yup\n//     .string()\n//     .required('Phone number must be digits and can contain spaces'),\n// });\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var nameInputId=nanoid();var numberInputId=nanoid();var initialValues={name:'',number:''};export default function ContactForm(_ref){var onSubmit=_ref.onSubmit,contacts=_ref.contacts;var handleSubmit=function handleSubmit(values,_ref2){var resetForm=_ref2.resetForm;var checkedName=contacts.map(function(contact){return contact.name;});if(checkedName.includes(values.name)){alert(\"\".concat(values.name,\" is already in contacts\"));return;}onSubmit(values);resetForm();};return/*#__PURE__*/_jsx(Formik,{initialValues:initialValues// validationSchema={schema}\n,onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(FormList,{autoComplete:\"off\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:nameInputId,children:[/*#__PURE__*/_jsx(\"p\",{children:\"Name\"}),/*#__PURE__*/_jsx(Input,{id:nameInputId,type:\"text\",name:\"name\",placeholder:\"Full name\",pattern:\"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",title:\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",required:true}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"name\"})]}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:numberInputId,children:[/*#__PURE__*/_jsx(\"p\",{children:\"Number\"}),/*#__PURE__*/_jsx(Input,{id:numberInputId,type:\"tel\",name:\"number\",placeholder:\"111-11-11\",pattern:\"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",title:\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",required:true}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"number\"})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",children:\"Add contact\"})]})});}// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import { nanoid } from 'nanoid';\n// class ContactForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   };\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n//   nameInputId = nanoid();\n//   numberInputId = nanoid();\n//   onChanchEvent = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n//   onSubmitData = e => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.onSubmitData}>\n//         <label htmlFor={this.nameInputId}>\n//           Name\n//           <input\n//             id={this.nameInputId}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.onChanchEvent}\n//             placeholder=\"Full name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//         </label>\n//         <label htmlFor={this.numberInputId}>\n//           Number\n//           <input\n//             id={this.numberInputId}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.onChanchEvent}\n//             placeholder=\"111-11-11\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\">Add contact</button>\n//       </form>\n//     );\n//   }\n// }\n// export default ContactForm;","map":{"version":3,"sources":["C:/Users/iSokol/Documents/GitHub/goit-react-hw-02-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["Formik","ErrorMessage","Input","Button","FormList","nanoid","nameInputId","numberInputId","initialValues","name","number","ContactForm","onSubmit","contacts","handleSubmit","values","resetForm","checkedName","map","contact","includes","alert"],"mappings":"AACA,OAASA,MAAT,CAAiBC,YAAjB,KAAqC,QAArC,CACA,OAASC,KAAT,CAAgBC,MAAhB,CAAwBC,QAAxB,KAAwC,sBAAxC,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;wFAEA,GAAMC,CAAAA,WAAW,CAAGD,MAAM,EAA1B,CACA,GAAME,CAAAA,aAAa,CAAGF,MAAM,EAA5B,CAEA,GAAMG,CAAAA,aAAa,CAAG,CACpBC,IAAI,CAAE,EADc,CAEpBC,MAAM,CAAE,EAFY,CAAtB,CAKA,cAAe,SAASC,CAAAA,WAAT,MAA6C,IAAtBC,CAAAA,QAAsB,MAAtBA,QAAsB,CAAZC,QAAY,MAAZA,QAAY,CAC1D,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,OAA2B,IAAhBC,CAAAA,SAAgB,OAAhBA,SAAgB,CAC9C,GAAMC,CAAAA,WAAW,CAAGJ,QAAQ,CAACK,GAAT,CAAa,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACV,IAAZ,EAApB,CAApB,CAEA,GAAIQ,WAAW,CAACG,QAAZ,CAAqBL,MAAM,CAACN,IAA5B,CAAJ,CAAuC,CACrCY,KAAK,WAAIN,MAAM,CAACN,IAAX,4BAAL,CACA,OACD,CAEDG,QAAQ,CAACG,MAAD,CAAR,CACAC,SAAS,GACV,CAVD,CAYA,mBACE,KAAC,MAAD,EACE,aAAa,CAAER,aACf;AAFF,CAGE,QAAQ,CAAEM,YAHZ,uBAKE,MAAC,QAAD,EAAU,YAAY,CAAC,KAAvB,wBACE,eAAO,OAAO,CAAER,WAAhB,wBACE,2BADF,cAEE,KAAC,KAAD,EACE,EAAE,CAAEA,WADN,CAEE,IAAI,CAAC,MAFP,CAGE,IAAI,CAAC,MAHP,CAIE,WAAW,CAAC,WAJd,CAKE,OAAO,CAAC,wHALV,CAME,KAAK,CAAC,wIANR,CAOE,QAAQ,KAPV,EAFF,cAWE,KAAC,YAAD,EAAc,IAAI,CAAC,MAAnB,EAXF,GADF,cAeE,eAAO,OAAO,CAAEC,aAAhB,wBACE,6BADF,cAEE,KAAC,KAAD,EACE,EAAE,CAAEA,aADN,CAEE,IAAI,CAAC,KAFP,CAGE,IAAI,CAAC,QAHP,CAIE,WAAW,CAAC,WAJd,CAKE,OAAO,CAAC,wFALV,CAME,KAAK,CAAC,8FANR,CAOE,QAAQ,KAPV,EAFF,cAWE,KAAC,YAAD,EAAc,IAAI,CAAC,QAAnB,EAXF,GAfF,cA6BE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,yBA7BF,GALF,EADF,CAuCD,CAOD;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Formik, ErrorMessage } from 'formik';\r\nimport { Input, Button, FormList } from './ContactForm.styled';\r\nimport { nanoid } from 'nanoid';\r\n// import * as yup from 'yup';\r\n\r\n// const schema = yup.object().shape({\r\n//   name: yup.string().required('Name may contain only letters'),\r\n//   numder: yup\r\n//     .string()\r\n//     .required('Phone number must be digits and can contain spaces'),\r\n// });\r\n\r\nconst nameInputId = nanoid();\r\nconst numberInputId = nanoid();\r\n\r\nconst initialValues = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nexport default function ContactForm({ onSubmit, contacts }) {\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    const checkedName = contacts.map(contact => contact.name);\r\n\r\n    if (checkedName.includes(values.name)) {\r\n      alert(`${values.name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    onSubmit(values);\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      // validationSchema={schema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <FormList autoComplete=\"off\">\r\n        <label htmlFor={nameInputId}>\r\n          <p>Name</p>\r\n          <Input\r\n            id={nameInputId}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Full name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n          />\r\n          <ErrorMessage name=\"name\" />\r\n        </label>\r\n\r\n        <label htmlFor={numberInputId}>\r\n          <p>Number</p>\r\n          <Input\r\n            id={numberInputId}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"111-11-11\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n          />\r\n          <ErrorMessage name=\"number\" />\r\n        </label>\r\n\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </FormList>\r\n    </Formik>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\n// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import { nanoid } from 'nanoid';\r\n\r\n// class ContactForm extends Component {\r\n//   static propTypes = {\r\n//     onSubmit: PropTypes.func.isRequired,\r\n//   };\r\n\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   nameInputId = nanoid();\r\n//   numberInputId = nanoid();\r\n\r\n//   onChanchEvent = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   onSubmitData = e => {\r\n//     e.preventDefault();\r\n\r\n//     this.props.onSubmit(this.state);\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n\r\n//     return (\r\n//       <form onSubmit={this.onSubmitData}>\r\n//         <label htmlFor={this.nameInputId}>\r\n//           Name\r\n//           <input\r\n//             id={this.nameInputId}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             value={name}\r\n//             onChange={this.onChanchEvent}\r\n//             placeholder=\"Full name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n//             required\r\n//           />\r\n//         </label>\r\n\r\n//         <label htmlFor={this.numberInputId}>\r\n//           Number\r\n//           <input\r\n//             id={this.numberInputId}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             value={number}\r\n//             onChange={this.onChanchEvent}\r\n//             placeholder=\"111-11-11\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n//             required\r\n//           />\r\n//         </label>\r\n\r\n//         <button type=\"submit\">Add contact</button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ContactForm;\r\n"]},"metadata":{},"sourceType":"module"}