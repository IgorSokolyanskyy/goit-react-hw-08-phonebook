{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iSokol\\\\Documents\\\\GitHub\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\ContactForm\\\\FormikForm.jsx\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid'; // const schema = yup.object().shape({\n//   name: yup.string().required(),\n//   numder: yup.string().min(7).max(7).required(),\n// });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\nconst initialValues = {\n  name: '',\n  number: ''\n};\n\nconst FormikForm = _ref => {\n  let {\n    onSubmit,\n    contacts\n  } = _ref;\n\n  const handleSubmit = (values, _ref2) => {\n    let {\n      resetForm\n    } = _ref2;\n    const checkedName = contacts.map(contact => contact.name);\n\n    if (checkedName.includes(values.name)) {\n      alert(`${values.name} is already in contacts`);\n      return;\n    }\n\n    onSubmit(values);\n    resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues // validationSchema={schema}\n    ,\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: nameInputId,\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(Field, {\n          id: nameInputId,\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Full name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: numberInputId,\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(Field, {\n          id: numberInputId,\n          type: \"tel\",\n          name: \"number\",\n          placeholder: \"111-11-11\",\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FormikForm;\nexport default FormikForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormikForm\");","map":{"version":3,"sources":["C:/Users/iSokol/Documents/GitHub/goit-react-hw-02-phonebook/src/components/ContactForm/FormikForm.jsx"],"names":["Formik","Form","Field","ErrorMessage","yup","nanoid","nameInputId","numberInputId","initialValues","name","number","FormikForm","onSubmit","contacts","handleSubmit","values","resetForm","checkedName","map","contact","includes","alert"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAEA;AACA;AACA;AACA;;;AAEA,MAAMC,WAAW,GAAGD,MAAM,EAA1B;AACA,MAAME,aAAa,GAAGF,MAAM,EAA5B;AAEA,MAAMG,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAE,EADc;AAEpBC,EAAAA,MAAM,EAAE;AAFY,CAAtB;;AAKA,MAAMC,UAAU,GAAG,QAA4B;AAAA,MAA3B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;;AAC7C,QAAMC,YAAY,GAAG,CAACC,MAAD,YAA2B;AAAA,QAAlB;AAAEC,MAAAA;AAAF,KAAkB;AAC9C,UAAMC,WAAW,GAAGJ,QAAQ,CAACK,GAAT,CAAaC,OAAO,IAAIA,OAAO,CAACV,IAAhC,CAApB;;AAEA,QAAIQ,WAAW,CAACG,QAAZ,CAAqBL,MAAM,CAACN,IAA5B,CAAJ,EAAuC;AACrCY,MAAAA,KAAK,CAAE,GAAEN,MAAM,CAACN,IAAK,yBAAhB,CAAL;AACA;AACD;;AAEDG,IAAAA,QAAQ,CAACG,MAAD,CAAR;AACAC,IAAAA,SAAS;AACV,GAVD;;AAYA,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAER,aADjB,CAEE;AAFF;AAGE,IAAA,QAAQ,EAAEM,YAHZ;AAAA,2BAKE,QAAC,IAAD;AAAM,MAAA,YAAY,EAAC,KAAnB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAER,WAAhB;AAAA,wCAEE,QAAC,KAAD;AACE,UAAA,EAAE,EAAEA,WADN;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,WAAW,EAAC,WAJd;AAKE,UAAA,OAAO,EAAC,wHALV;AAME,UAAA,KAAK,EAAC,wIANR;AAOE,UAAA,QAAQ;AAPV;AAAA;AAAA;AAAA;AAAA,gBAFF,eAWE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAcE;AAAA;AAAA;AAAA;AAAA,cAdF,eAeE;AAAO,QAAA,OAAO,EAAEC,aAAhB;AAAA,0CAEE,QAAC,KAAD;AACE,UAAA,EAAE,EAAEA,aADN;AAEE,UAAA,IAAI,EAAC,KAFP;AAGE,UAAA,IAAI,EAAC,QAHP;AAIE,UAAA,WAAW,EAAC,WAJd;AAKE,UAAA,OAAO,EAAC,wFALV;AAME,UAAA,KAAK,EAAC,8FANR;AAOE,UAAA,QAAQ;AAPV;AAAA;AAAA;AAAA;AAAA,gBAFF,eAWE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eA4BE;AAAA;AAAA;AAAA;AAAA,cA5BF,eA6BE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CApDD;;KAAMI,U;AAsDN,eAAeA,UAAf","sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { nanoid } from 'nanoid';\r\n\r\n// const schema = yup.object().shape({\r\n//   name: yup.string().required(),\r\n//   numder: yup.string().min(7).max(7).required(),\r\n// });\r\n\r\nconst nameInputId = nanoid();\r\nconst numberInputId = nanoid();\r\n\r\nconst initialValues = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nconst FormikForm = ({ onSubmit, contacts }) => {\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    const checkedName = contacts.map(contact => contact.name);\r\n\r\n    if (checkedName.includes(values.name)) {\r\n      alert(`${values.name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    onSubmit(values);\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      // validationSchema={schema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <Form autoComplete=\"off\">\r\n        <label htmlFor={nameInputId}>\r\n          Name\r\n          <Field\r\n            id={nameInputId}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Full name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n          />\r\n          <ErrorMessage name=\"name\" />\r\n        </label>\r\n        <br />\r\n        <label htmlFor={numberInputId}>\r\n          Number\r\n          <Field\r\n            id={numberInputId}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"111-11-11\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n          />\r\n          <ErrorMessage name=\"number\" />\r\n        </label>\r\n        <br />\r\n        <button type=\"submit\">Add contact</button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormikForm;\r\n"]},"metadata":{},"sourceType":"module"}