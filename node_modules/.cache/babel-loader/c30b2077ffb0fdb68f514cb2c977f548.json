{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iSokol\\\\Documents\\\\GitHub\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\ContactForm\\\\ContactForm.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      name: '',\n      number: ''\n    };\n    this.nameInputId = nanoid();\n    this.numberInputId = nanoid();\n\n    this.onChanchEvent = e => {\n      const {\n        name,\n        value\n      } = e.currentTarget;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.onSubmitData = e => {\n      e.preventDefault();\n      this.props.onSubmit(this.state);\n      this.reset();\n    };\n\n    this.reset = () => {\n      this.setState({\n        name: '',\n        number: ''\n      });\n    };\n  }\n\n  render() {\n    const {\n      name,\n      number\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmitData,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: this.nameInputId,\n          children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: this.nameInputId,\n            type: \"text\",\n            name: \"name\",\n            value: name,\n            onChange: this.onChanchEvent,\n            placeholder: \"Full name\",\n            pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n            title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: this.numberInputId,\n          children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: this.numberInputId,\n            type: \"tel\",\n            name: \"number\",\n            value: number,\n            onChange: this.onChanchEvent,\n            placeholder: \"111-11-11\",\n            pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n            title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired\n};\nexport default ContactForm;","map":{"version":3,"sources":["C:/Users/iSokol/Documents/GitHub/goit-react-hw-02-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["React","Component","PropTypes","Formik","nanoid","ContactForm","state","name","number","nameInputId","numberInputId","onChanchEvent","e","value","currentTarget","setState","onSubmitData","preventDefault","props","onSubmit","reset","render","propTypes","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAKlCK,KALkC,GAK1B;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,MAAM,EAAE;AAFF,KAL0B;AAAA,SAUlCC,WAVkC,GAUpBL,MAAM,EAVc;AAAA,SAWlCM,aAXkC,GAWlBN,MAAM,EAXY;;AAAA,SAalCO,aAbkC,GAalBC,CAAC,IAAI;AACnB,YAAM;AAAEL,QAAAA,IAAF;AAAQM,QAAAA;AAAR,UAAkBD,CAAC,CAACE,aAA1B;AACA,WAAKC,QAAL,CAAc;AAAE,SAACR,IAAD,GAAQM;AAAV,OAAd;AACD,KAhBiC;;AAAA,SAkBlCG,YAlBkC,GAkBnBJ,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACK,cAAF;AAEA,WAAKC,KAAL,CAAWC,QAAX,CAAoB,KAAKb,KAAzB;AACA,WAAKc,KAAL;AACD,KAvBiC;;AAAA,SAyBlCA,KAzBkC,GAyB1B,MAAM;AACZ,WAAKL,QAAL,CAAc;AAAER,QAAAA,IAAI,EAAE,EAAR;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAAd;AACD,KA3BiC;AAAA;;AA6BlCa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEd,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmB,KAAKF,KAA9B;AACA,wBACE,QAAC,MAAD;AAAA,6BACE;AAAM,QAAA,QAAQ,EAAE,KAAKU,YAArB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAE,KAAKP,WAArB;AAAA,0CAEE;AACE,YAAA,EAAE,EAAE,KAAKA,WADX;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,IAAI,EAAC,MAHP;AAIE,YAAA,KAAK,EAAEF,IAJT;AAKE,YAAA,QAAQ,EAAE,KAAKI,aALjB;AAME,YAAA,WAAW,EAAC,WANd;AAOE,YAAA,OAAO,EAAC,wHAPV;AAQE,YAAA,KAAK,EAAC,wIARR;AASE,YAAA,QAAQ;AATV;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAgBE;AAAO,UAAA,OAAO,EAAE,KAAKD,aAArB;AAAA,4CAEE;AACE,YAAA,EAAE,EAAE,KAAKA,aADX;AAEE,YAAA,IAAI,EAAC,KAFP;AAGE,YAAA,IAAI,EAAC,QAHP;AAIE,YAAA,KAAK,EAAEF,MAJT;AAKE,YAAA,QAAQ,EAAE,KAAKG,aALjB;AAME,YAAA,WAAW,EAAC,WANd;AAOE,YAAA,OAAO,EAAC,wFAPV;AAQE,YAAA,KAAK,EAAC,8FARR;AASE,YAAA,QAAQ;AATV;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF,eA+BE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAqCD;;AApEiC;;AAA9BN,W,CACGiB,S,GAAY;AACjBH,EAAAA,QAAQ,EAAEjB,SAAS,CAACqB,IAAV,CAAeC;AADR,C;AAsErB,eAAenB,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport { nanoid } from 'nanoid';\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = nanoid();\r\n  numberInputId = nanoid();\r\n\r\n  onChanchEvent = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onSubmitData = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <Formik>\r\n        <form onSubmit={this.onSubmitData}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name\r\n            <input\r\n              id={this.nameInputId}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.onChanchEvent}\r\n              placeholder=\"Full name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <label htmlFor={this.numberInputId}>\r\n            Number\r\n            <input\r\n              id={this.numberInputId}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.onChanchEvent}\r\n              placeholder=\"111-11-11\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </Formik>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n"]},"metadata":{},"sourceType":"module"}